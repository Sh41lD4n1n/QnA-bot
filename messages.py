from _ast import Tuple

from botbuilder.core import CardFactory
from botbuilder.schema import CardImage, CardAction, ActionTypes, ThumbnailCard, Attachment, ReceiptItem, Fact, \
    ReceiptCard, Activity
from datetime import datetime
from tickets import PTicket


# await turn_context.send_activity(MessageFactory.attachment(await messages.function_SETTING(userProfile.language,userProfile.email)))
class Button:
    def __init__(self, title: str, value: str):
        self.title = title
        self.value = value


LIST_OF_COMMAND = [
    "/start", "/help", "/setting", "/ticket", "/opened", "/closed", "/skip", "/cancel"
]


def get_text_from_file(page: int, dialog: int) -> []:
    f = open('textOfMessages', 'r')
    lines = f.readlines()
    number_of_str = 15
    iterator = page * number_of_str + 1
    if lines[iterator][0] == str(page):
        iterator += 1
        while lines[iterator][1] != str(dialog) and lines[iterator][0] == "-":
            iterator = iterator + int(lines[iterator][3])
        if lines[iterator][0] == "-":
            last_line = int(lines[iterator][3])
            for i in range(last_line, iterator + 1):
                list.append(lines[i])
    f.close()


def language_setting() -> Activity:
    return Activity(
        attachments=[
            {
                "contentType": "application/vnd.microsoft.card.thumbnail",
                "content": {
                    "title": "Hello! It is IT Department help bot!üì£ /–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ –±–æ—Ç-–ø–æ–º–æ—â–Ω–∏–∫ –æ—Ç –î–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç–∞ –ò–¢ üì£",
                    "text": "Now, choose your language! üòä/ –í—ã–±–µ—Ä–∏ —è–∑—ã–∫ üòä",
                    "buttons": [
                        {
                            "type": "imBack",
                            "title": "English",
                            "image": "http://moopz.com/assets_c/2012/06/emoji-thumbs-up-150-thumb-autox125-140616.jpg",
                            "value": "English"
                        },
                        {
                            "type": "imBack",
                            "title": "–†—É—Å—Å–∫–∏–π",
                            "image": "https://linguacontact.com/wp-content/uploads/russia-flag.png",
                            "value": "–†—É—Å—Å–∫–∏–π"
                        },
                    ],
                }
            }
        ],
    )


def create_thumbnail_card(title: str, subtitle: str,
                          text: str, url: str, elements_of_button: Button = []) -> Attachment:
    if len(elements_of_button) != 0:
        button = []
        for elem in elements_of_button:
            button.append(CardAction(
                type=ActionTypes.im_back,
                title=elem.title,
                value=elem.value,
            ))
        return CardFactory.thumbnail_card(ThumbnailCard(title=title,
                                                        subtitle=subtitle,
                                                        text=text,
                                                        images=[
                                                            CardImage(
                                                                url=url,
                                                            )
                                                        ],
                                                        buttons=button,
                                                        )
                                          )


# dialogs before start
def function_TYPE_START():
    eng = "–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –¥–∏–∞–ª–æ–≥ —Å –±–æ—Ç–æ–º –Ω–∞–ø–∏—à–∏—Ç–µ ```Start```"
    rus = "To start conversation with bot please write ```Start```"
    return eng, rus


# dialogs for introduction stage

def function_ASK_EMAIL(language: str):
    if language == "English":
        return "Ok It seems, I haven‚Äôt met you before. Send me your e-mail address please."
    if language == "–†—É—Å—Å–∫–∏–π":
        return "–ú–Ω–µ –∫–∞–∂–µ—Ç—Å—è –º—ã –Ω–µ –æ–±—â–∞–ª–∏—Å—å —Ä–∞–Ω—å—à–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –∞–¥—Ä–µ—Å —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π –ø–æ—á—Ç—ã –≤ —Å–ª–µ–¥—É—é—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏"
    if language != "–†—É—Å—Å–∫–∏–π" and language != "English":
        return "It seems, I haven‚Äôt met before. Send me your e-mail address please. –ú–Ω–µ –∫–∞–∂–µ—Ç—Å—è –º—ã –Ω–µ –æ–±—â–∞–ª–∏—Å—å —Ä–∞–Ω—å—à–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –∞–¥—Ä–µ—Å —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π –ø–æ—á—Ç—ã –≤ —Å–ª–µ–¥—É—é—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏"

def function_EMAIL_INCOR(language:str):
    if language == "English":
        return "Please write innopolis email \n Example: n.surname@innopolis.ru",""
    elif language == "–†—É—Å—Å–∫–∏–π":
        return "","–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –Ω–∞–ø–∏—à–∏—Ç–µ –∞–¥—Ä–µ—Å –∏–Ω–Ω–æ–ø–æ–ª–∏—Å–æ–≤—Å–∫–æ–π —ç–ª. –ø–æ—á—Ç—ã \n –ü—Ä–∏–º–µ—Ä: n.surname@innopolis.ru"
    else:
        return "Please write innoplis email \n Example: n.sername@innopolis.ru", "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –Ω–∞–ø–∏—à–∏—Ç–µ –∞–¥—Ä–µ—Å –∏–Ω–Ω–æ–ø–æ–ª–∏—Å–æ–≤–∫—Å–æ–π —ç–ª. –ø–æ—á—Ç—ã \n –ü—Ä–∏–º–µ—Ä: n.surname@innopolis.ru"


def function_EMAIL_COR(language:str,email:str):
    if language == "English":
        return f"All right! Your email address is {email}"
    elif language == "–†—É—Å—Å–∫–∏–π":
        return f"–•–æ—Ä–æ—à–æ. –¢–≤–æ–π –∞–¥—Ä–µ—Å —ç–ª. –ø–æ—á—Ç—ã {email}"
    else:
        return f"All right! Your email address is /–•–æ—Ä–æ—à–æ. –¢–≤–æ–π –∞–¥—Ä–µ—Å —ç–ª. –ø–æ—á—Ç—ã  {userProfile.email}"

async def function_SETTING(language: str, email: str) -> Attachment:
    button = [Button("English", "English"), Button("–†—É—Å—Å–∫–∏–π", "–†—É—Å—Å–∫–∏–π")]
    if language == "English":
        title = "Setting"
        subtitle = "Your current parameters:"
        text = "<ul><li><strong>Language:</strong>        English</li><li><strong>Email</strong>       " + email + "</li></ul>"
    elif language == "–†—É—Å—Å–∫–∏–π":
        title = "–ù–∞—Å—Ç—Ä–æ–π–∫–∏"
        subtitle = "–í–∞—à–∏ —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:"
        text = "<ul><li><strong>–Ø–∑—ã–∫:</strong>        –†—É—Å—Å–∫–∏–π</li><li>–≠–ª. –∞–¥—Ä–µ—Å       " + email + "</li></ul>"
    else:
        title = "Setting/–ù–∞—Å—Ç—Ä–æ–π–∫–∏"
        subtitle = "Your current parameters:/ –í–∞—à–∏ —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"
        text = "<ul><li><strong>Language/–Ø–∑—ã–∫:</strong>        Bilingual/–î–≤—É—è–∑—ã—á–Ω—ã–π</li><li>Email/–≠–ª.–ø–æ—á—Ç–∞       " + email + "</li></ul>"
    return create_thumbnail_card(title, subtitle, text, url="https://static.thenounproject.com/png/993506-200.png",
                                 elements_of_button=button)


# dialogs for manage_question_state funcion
async def function_ASK_QUESTION(language: str) -> Attachment:
    if language == "English":
        title = "Ask your question!"
        subtitle = " All right. All settings are finished. Now, you can ask your question or return to setting."
        text = "Write a question or push button."
        button = [Button("Return to setting", "/setting")]
    elif language == "–†—É—Å—Å–∫–∏–π":
        title = "–ó–∞–¥–∞–π—Ç–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å!",
        subtitle = " –í—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω—ã, —Å–µ–π—á–∞—Å –≤—ã –º–æ–∂–µ—Ç–µ –∑–∞–¥–∞—Ç—å —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ –Ω–∞—Å—Ç—Ä–π–∫–∞–º."
        text = "–ù–∞–ø–∏—à–∏—Ç–µ –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É."
        button = [Button("–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º", "/setting")]
    else:
        title = "Ask your question!/–ó–∞–¥–∞–π—Ç–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å!"
        subtitle = " All right. All settings are finished. Now, you can ask your question or return to setting./ –í—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω—ã, —Å–µ–π—á–∞—Å –≤—ã –º–æ–∂–µ—Ç–µ –∑–∞–¥–∞—Ç—å —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ –Ω–∞—Å—Ç—Ä–π–∫–∞–º."
        text = "You should return to setting to set language. /–°–æ–≤–µ—Ç—É–µ–º –≤–∞–º –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º –∏ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —è–∑—ã–∫."
        button = [Button("Return to setting/–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º", "/setting")]
    return create_thumbnail_card(title, subtitle, text,
                                 url="https://healthinsuremarketplace.com/wp-content/uploads/2014/02/Fotolia_53938997_XS.jpg",
                                 elements_of_button=button)


async def function_DID_THAT_HELP(language: str) -> Attachment:
    if language == "English":
        title = "Did that help?"
        subtitle = ""
        text = "Click yes, if your question are solved." \
               "If you want to continue and write question for operator, click no. Click cancel to close question."
        button = [Button("Yes", "Yes"), Button("No", "No"), Button("Cancel", "/cancel")]
    elif language == "–†—É—Å—Å–∫–∏–π":
        title = "–í–∞–º –ø–æ–º–æ–≥ –Ω–∞—à –æ—Ç–≤–µ—Ç?"
        subtitle = ""
        text = "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–∞, –µ—Å–ª–∏ –≤–æ–ø—Ä–æ—Å —Ä–µ—à—ë–Ω. –ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –æ–ø–µ—Ä–∞—Ç–æ—Ä—É, –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–µ—Ç. –ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∑–∞–∫—Ä—ã—Ç—å –≤–æ–ø—Ä–æ—Å, –Ω–∞–∂–º–∏—Ç–µ –æ—Ç–º–µ–Ω–∞."
        button = [Button("–î–∞", "Yes"), Button("–ù–µ—Ç", "No"), Button("–û—Ç–º–µ–Ω–∞", "/cancel")]
    else:
        title = "Did that help?/–í–∞–º –ø–æ–º–æ–≥ –Ω–∞—à –æ—Ç–≤–µ—Ç?"
        subtitle = ""
        text = "If you want to continue and write question for operator, click no. Click cancel to close question." \
               "/–û—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–∞, –µ—Å–ª–∏ –≤–æ–ø—Ä–æ—Å —Ä–µ—à—ë–Ω. –ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –æ–ø–µ—Ä–∞—Ç–æ—Ä—É, –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–µ—Ç. –ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∑–∞–∫—Ä—ã—Ç—å –≤–æ–ø—Ä–æ—Å, –Ω–∞–∂–º–∏—Ç–µ –æ—Ç–º–µ–Ω–∞."
        button = [Button("Yes/–î–∞", "Yes"), Button("No/–ù–µ—Ç", "No"), Button("Cancel/–û—Ç–º–µ–Ω–∞", "/cancel")]
    return create_thumbnail_card(title, subtitle, text,
                                 "https://www.mtzion.lib.il.us/kids-teens/question-mark.jpg/@@images/image.jpeg",
                                 button)


async def function_ASK_NEW_QUESTION(language: str) -> Attachment:
    if language == "English":
        title = "Do you have any other question?"
        subtitle = "You can ask your next question or change setting."
        text = "Write a question or push button."
        button = [Button("Setting", "/setting")]
    elif language == "–†—É—Å—Å–∫–∏–π":
        title = "–ï—Å—Ç—å –µ—â–µ –≤–æ–ø—Ä–æ—Å—ã?"
        subtitle = "–í—ã –º–æ–∂–µ—Ç–µ –∑–∞–¥–∞—Ç—å —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –∏–∑–º–µ–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–π–∫–∏."
        text = "–ù–∞–ø–∏—à–∏—Ç–µ –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É."
        button = [Button("–ù–∞—Å—Ç—Ä–æ–π–∫–∏", "/setting")]
    else:
        title = "Do you have any other question? / –ï—Å—Ç—å –µ—â–µ –≤–æ–ø—Ä–æ—Å—ã?"
        subtitle = "You can ask your next question or change setting. / –í—ã –º–æ–∂–µ—Ç–µ –∑–∞–¥–∞—Ç—å —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –∏–∑–º–µ–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–π–∫–∏."
        text = "You should return to setting to set language. /–°–æ–≤–µ—Ç—É–µ–º –≤–∞–º –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º –∏ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —è–∑—ã–∫."
        button = [Button("Setting/–ù–∞—Å—Ç—Ä–æ–π–∫–∏", "/setting")]
    return create_thumbnail_card(title, subtitle, text,
                                 url="https://healthinsuremarketplace.com/wp-content/uploads/2014/02/Fotolia_53938997_XS.jpg",
                                 elements_of_button=button)


async def function_TYPE_QUESTION(language: str) -> Attachment:
    if language == "English":
        title = "Let's prepare question to send to operator:"
        subtitle = "Please write your question in first line and then add detales, or write /skip to ask question that was writen before, or close question"
        text = "Push button or write question"
        button = [Button("Skip", "/skip"), Button("Close question", "/cancel")]
    elif language == "–†—É—Å—Å–∫–∏–π":
        title = "–î–∞–≤–∞–π—Ç–µ –ø–æ–¥–≥–æ—Ç–æ–≤–∏–º –≤–æ–ø—Ä–æ—Å –¥–ª—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞"
        subtitle = "–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å –Ω–∏–∂–µ –∏ –¥–æ–±–∞–≤—å—Ç–µ –∫–æ–º–µ–Ω—Ç–∞—Ä–∏–∏ –≤ —Å–ª–µ–¥—É—é—â–µ–π —Å—Ç—Ä–æ–∫–µ."
        " –ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–æ—Ç –≤–æ–ø—Ä–æ—Å –∫–æ—Ç–æ—Ä—ã–π –±—ã–ª –∑–∞–¥–∞–Ω –±–æ—Ç—É –Ω–∞–∂–º–∏—Ç–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å. –ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å –≤–æ–ø—Ä–æ—Å, –Ω–∞–∂–º–∏—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å –≤–æ–ø—Ä–æ—Å"
        text = "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –≤–æ–ø—Ä–æ—Å."
        button = [Button("–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", "/skip"), Button("–û—Ç–º–µ–Ω–∏—Ç—å –≤–æ–ø—Ä–æ—Å", "/cancel")]
    else:
        title = "Let's prepare question to send to operator:/ –î–∞–≤–∞–π—Ç–µ –ø—Ä–æ–¥–≥–æ—Ç–æ–≤–∏–º –≤–æ–ø—Ä–æ—Å –¥–ª—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞"
        subtitle = "Please write your question in first line and then add detales, or write" \
                   "/skip to ask question that was writen before, or close question/ ""–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å –Ω–∏–∂–µ –∏ –¥–æ–±–∞–≤—å—Ç–µ –∫–æ–º–µ–Ω—Ç–∞—Ä–∏–∏ –≤ —Å–ª–µ–¥—É—é—â–µ–π —Å—Ç—Ä–æ–∫–µ." \
                   " –ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–æ—Ç –≤–æ–ø—Ä–æ—Å –∫–æ—Ç–æ—Ä—ã–π –±—ã–ª –∑–∞–¥–∞–Ω –±–æ—Ç—É –Ω–∞–∂–º–∏—Ç–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å. –ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å –≤–æ–ø—Ä–æ—Å, –Ω–∞–∂–º–∏—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å –≤–æ–ø—Ä–æ—Å"
        text = "Push bottun or write question / –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –≤–æ–ø—Ä–æ—Å."
        button = [Button("Skip/–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", "/skip"), Button("Close question/–û—Ç–º–µ–Ω–∏—Ç—å –≤–æ–ø—Ä–æ—Å", "/cancel")]
    return create_thumbnail_card(title, subtitle, text, "https://static.thenounproject.com/png/993506-200.png", button)


async def function_BUILD_QUESTION(question: str, detales: str, language: str, email: str, ticket_id: str) -> Attachment:
    date = datetime.now().timetuple()
    if language == "English":
        title = "Question for operator"
        last_sentence = "Best regards, \n mail  " + email
        ticket_id = f"Ticket id {ticket_id}"
    elif language == "–†—É—Å—Å–∫–∏–π":
        title = "–í–æ–ø—Ä–æ—Å –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ–ø–µ—Ä–∞—Ç–æ—Ä—É"
        last_sentence = "–° –Ω–∞–∏–ª—É—á—à–∏–º–∏ –ø–æ–∂–µ–ª–∞–Ω–∏—è–º–∏, \n mail  " + email
        ticket_id = f"–ù–æ–º–µ—Ä –∑–∞–ø—Ä–æ—Å–∞ {ticket_id}"
    else:
        title = "Question for operator/–í–æ–ø—Ä–æ—Å –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ–ø–µ—Ä–∞—Ç–æ—Ä—É"
        last_sentence = "Best regards/–° –Ω–∞–∏–ª—É—á—à–∏–º–∏ –ø–æ–∂–µ–ª–∞–Ω–∏—è–º–∏, \n mail  " + email
        ticket_id = f"Ticket id/–ù–æ–º–µ—Ä –∑–∞–ø—Ä–æ—Å–∞ {ticket_id}"
    return CardFactory.adaptive_card({
        "$schema": "http://adaptivecards.io/schemas/adaptive-card.json",
        "version": "1.0",
        "type": "AdaptiveCard",
        "body": [
            {
                "type": "TextBlock",
                "text": title,
                "weight": "bolder",
                "isSubtle": False,
            },
            {"type": "TextBlock", "text": question, "weight": "bolder", "separator": True},
            {"type": "TextBlock", "text": detales, "spacing": "none", "wrap": True},
            {
                "type": "TextBlock",
                "text": last_sentence,
                "weight": "bolder",
                "spacing": "medium",
            },
            {
                "type": "TextBlock",
                "text": ticket_id,
                "weight": "bolder",
                "spacing": "medium",
            },
            {
                "type": "TextBlock",
                "text": str(date[1]) + "/" + str(date[2]) + "/" + str(date[0]),
                "weight": "bolder",
                "spacing": "none",
            },
        ],
    }
    )


def function_TICKET_WAS_CREATED(language: str) -> str:
    if language == "English":
        return "Ticket was created. I will inform you about answer."
    elif language == "–†—É—Å—Å–∫–∏–π":
        return "–ó–∞–ø—Ä–æ—Å —Å–æ–∑–¥–∞–Ω. –Ø —É–≤–µ–¥–æ–º–ª—é –æ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Ç–≤–µ—Ç–∞."
    else:
        return "Ticket was created. I will inform you about answer. / –ó–∞–ø—Ä–æ—Å —Å–æ–∑–¥–∞–Ω. –Ø —É–≤–µ–¥–æ–º–ª—é –æ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Ç–≤–µ—Ç–∞."


# dialogs for manage_feedback_state funcion
async def function_FEEDBACK(language: str) -> Attachment:
    buttons = [Button(title="üòÅ", value="5"), Button(title="üôÇ", value="4"), Button(title="üòê", value="3"),
               Button(title="üòï", value="2"), Button(title="üò°", value="1")]
    if language == "English":
        title = "Feedback"
        subtitle = "Thank you for using QnAbot"
        text = "We believe that you have found answer for your question." \
               " To help us improve, we'd like to know your opinion."
    elif language == "–†—É—Å—Å–∫–∏–π":
        title = "–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å"
        subtitle = "–°–ø–∞—Å–∏–±–æ –≤–∞–º –∑–∞ —Ç–æ, —á—Ç–æ –ø–æ–ª—å–∑—É–µ—Ç–µ—Å—å –Ω–∞—à–∏–º –±–æ—Ç–æ–º."
        text = " –ú—ã –Ω–∞–¥–µ–µ–º—Å—è, —á—Ç–æ –≤—ã —Å–º–æ–≥–ª–∏ –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –Ω–∞ –≤–∞—à –≤–æ–ø—Ä–æ—Å. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–æ–º–æ–≥–∏—Ç–µ –Ω–∞–º —Å—Ç–∞—Ç—å –ª—É—á—à–µ –∏ –æ—Ü–µ–Ω–∏—Ç–µ —Ä–∞–±–æ—Ç—É –±–æ—Ç–∞."
    else:
        title = "Feedback/–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å"
        subtitle = "Thank you for using QnAbot, we believe that you have found your answer." \
                   " To help us improve, we'd like to know your opinion./  –°–ø–∞—Å–∏–±–æ –≤–∞–º –∑–∞ —Ç–æ, —á—Ç–æ –ø–æ–ª—å–∑—É–µ—Ç–µ—Å—å –Ω–∞—à–∏–º –±–æ—Ç–æ–º." \
                   " –ú—ã –Ω–∞–¥–µ–µ–º—Å—è, —á—Ç–æ –≤—ã —Å–º–æ–≥–ª–∏ –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –Ω–∞ –≤–∞—à –≤–æ–ø—Ä–æ—Å. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–æ–º–æ–≥–∏—Ç–µ –Ω–∞–º —Å—Ç–∞—Ç—å –ª—É—á—à–µ –∏ –æ—Ü–µ–Ω–∏—Ç–µ —Ä–∞–±–æ—Ç—É –±–æ—Ç–∞."
        text = "Please give a mark to bot. / –ü–æ—Å—Ç–∞–≤—å—Ç–µ –æ—Ü–µ–Ω–∫—É —Ä–∞–±–æ—Ç–µ –±–æ—Ç–∞"
    return create_thumbnail_card(title, subtitle, text
                                 ,
                                 url="https://encrypted-tbn0.gstatic.com/images?q=tbn%3AANd9GcRnwpGT0WK4U9VTQLnGRJ8GSR2i7LhUVOYmgdpRkfQ3Q-N8os9X&usqp=CAU",
                                 elements_of_button=buttons)


async def function_FEEDBACK1(language: str) -> Attachment:
    if language == "English":
        title = "Feedback"
        subtitle = "Thank you for your mark. It is important for us to know your opinion."
        text = "If you want to skip this step, push skip button. Could you please state your opinion in next message."
        button = [Button("Skip", "/skip")]
    elif language == "–†—É—Å—Å–∫–∏–π":
        title = "–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å"
        subtitle = "–°–ø–∞—Å–∏–±–æ –≤–∞–º –∑–∞ –≤–∞—à—É –æ—Ü–µ–Ω–∫—É."
        text = " –î–ª—è –Ω–∞—Å –æ—á–µ–Ω—å –≤–∞–∂–Ω–æ –∑–Ω–∞—Ç—å –≤–∞—à–µ –º–Ω–µ–Ω–∏–µ –∏ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ —á–∏—Ç–∞—Ç—å –≤–∞—à–∏ –∫–æ–º–µ–Ω—Ç–∞—Ä–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –æ—Å—Ç–∞–≤—å—Ç–µ –æ—Ç–∑—ã–≤ –≤ —Å–ª–µ–¥—É—é—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏. –ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å —ç—Ç–æ—Ç —à–∞–≥, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å."
        button = [Button("–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", "/skip")]
    else:
        title = "Feedback /–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å"
        subtitle = ""
        text = "Thank you for your mark. It is important for us." \
               "Could you please write your opinion in next message. /" \
               "–°–ø–∞—Å–∏–±–æ –≤–∞–º –∑–∞ –≤–∞—à—É –æ—Ü–µ–Ω–∫—É. –î–ª—è –Ω–∞—Å –æ—á–µ–Ω—å –≤–∞–∂–Ω–æ –∑–Ω–∞—Ç—å –≤–∞—à–µ –º–Ω–µ–Ω–∏–µ –∏ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ —á–∏—Ç–∞—Ç—å –≤–∞—à–∏ –∫–æ–º–µ–Ω—Ç–∞—Ä–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –æ—Å—Ç–∞–≤—å—Ç–µ –æ—Ç–∑—ã–≤ –≤ —Å–ª–µ–¥—É—é—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏."
        button = [Button("Skip/–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", "/skip")]
    return create_thumbnail_card(title, subtitle, text
                                 ,
                                 url="https://encrypted-tbn0.gstatic.com/images?q=tbn%3AANd9GcRnwpGT0WK4U9VTQLnGRJ8GSR2i7LhUVOYmgdpRkfQ3Q-N8os9X&usqp=CAU",
                                 elements_of_button=button)


def function_THANK_YOU(language: str) -> str:
    if language == "English":
        return "Thank you for your feedback!"
    elif language == "–†—É—Å—Å–∫–∏–π":
        return "–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –æ—Ç–∑—ã–≤!"
    else:
        "Thank you for your feedback!/C–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –æ—Ç–∑—ã–≤!"


# dialog for help message
async def function_HELP(language: str = "b", state: str = None) -> Attachment:
    width = "110px"
    if language == "English":
        get_text_from_file(0, 2)
        print(list)
        text = list[0]
        about_bot = list[1]
        author = list[2]
        contacts = list[3]
        description_for_command = list[4:9]
    elif language == "–†—É—Å—Å–∫–∏–π":
        text = "–ü–æ–º–æ—â—å"
        about_bot = "–ü—Ä–∏–≤–µ—Ç –∏ –¥–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ. –≠—Ç–æ –±–æ—Ç —É–º–µ–µ—Ç –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã. –ë–æ—Ç –º–æ–∂–µ—Ç –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –≤–æ–ø—Ä–æ—Å—ã –±—ã—Å—Ç—Ä–æ –∏ —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª–Ω–æ, –∞ —Å–ª–æ–∂–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã –±–æ—Ç –æ—Ç–ø—Ä–∞–≤–∏—Ç –æ–ø–µ—Ä–∞—Ç–æ—Ä—É."
        author = "–ë–æ—Ç –±—ã–ª —Å–æ–∑–¥–∞–Ω –∫–æ–º–∞–Ω–¥–æ–π —Å—Ç—É–¥–µ–Ω—Ç–æ–≤."
        contacts = "–í—ã –º–æ–∂–µ—Ç–µ –∑–∞–¥–∞—Ç—å –≤–∞—à–∏ –≤–æ–ø—Ä–æ—Å—ã —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ–º —Å –±–æ—Ç–æ–º --/--"
        description_for_command = [
            "–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –ø–æ–∑–≤–æ–ª—è–µ—Ç –Ω–∞—á–∞—Ç—å –¥–∏–∞–ª–æ–≥ —Å–æ –±–æ—Ç–æ–º",  # /start
            "–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ –Ω–∞—Å—Ç—Ä–æ–µ–∫. –û–Ω–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ –µ—Å–ª–∏ –±–æ—Ç –Ω–µ —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –Ω–µ "
            "—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
            # setting
            "–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –ø–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∏–∑ 10 –∑–∞–ø—Ä–æ—Å–æ–≤ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ç–æ—Ä—É(–æ—Ç–∫—Ä—ã—Ç—ã—Ö –∏ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö)",
            # ticket
            "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ —à–∞–≥–∏ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –≤–æ–ø—Ä–æ—Å–∞ –∏–ª–∏ —Å–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–∏ –æ—Ç–∑—ã–≤–∞, –º–æ–∂–Ω–æ —Å –ø–æ–º—â—å—é —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã",
            # skip
            "–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –ø–æ–∑–≤–æ–ª—è–µ—Ç –∑–∞–∫—Ä—ã—Ç—å –≤–æ–ø—Ä–æ—Å"  # cencel
        ]
    else:
        text = "Help message /" + "–ü–æ–º–æ—â—å"
        about_bot = "Hello and welcome to our bot. This bot is able to give answer for your question. " \
                    "Furthermore, some problems can be solved automatically by bot. Unfortunately some problems " \
                    "require human's(Operator's) intervention. / –ü—Ä–∏–≤–µ—Ç –∏ –¥–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ. " \
                    "–≠—Ç–æ –±–æ—Ç —É–º–µ–µ—Ç –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã. –ë–æ—Ç –º–æ–∂–µ—Ç –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –≤–æ–ø—Ä–æ—Å—ã –±—ã—Å—Ç—Ä–æ –∏ —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª–Ω–æ," \
                    " –∞ —Å–ª–æ–∂–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã –±–æ—Ç –æ—Ç–ø—Ä–∞–≤–∏—Ç –æ–ø–µ—Ä–∞—Ç–æ—Ä—É."
        author = "Bot was created by team of bachelor students /–ë–æ—Ç –±—ã–ª —Å–æ–∑–¥–∞–Ω –∫–æ–º–∞–Ω–¥–æ–π —Å—Ç—É–¥–µ–Ω—Ç–æ–≤."
        contacts = "You can ask your questions about interaction with bot to --/--"
        description_for_command = [
            "This command start conversation with bot / –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –ø–æ–∑–≤–æ–ª—è–µ—Ç –Ω–∞—á–∞—Ç—å –¥–∏–∞–ª–æ–≥ —Å–æ –±–æ—Ç–æ–º",  # /start
            "This command open menu of setting (There you can change language). This command available after "
            "initialisation and after you complete to write question / "
            "–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ –Ω–∞—Å—Ç—Ä–æ–µ–∫. –û–Ω–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ –µ—Å–ª–∏ –±–æ—Ç –Ω–µ —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –Ω–µ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
            # setting
            "This command open 10 tickets opened and closed / –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –ø–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∏–∑ 10 –∑–∞–ø—Ä–æ—Å–æ–≤ "
            "–æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ç–æ—Ä—É(–æ—Ç–∫—Ä—ã—Ç—ã—Ö –∏ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö)",  # ticket
            "This command allow you to skip some steps of question creation and feedback writing "
            "/ –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ —à–∞–≥–∏ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –≤–æ–ø—Ä–æ—Å–∞ –∏–ª–∏ —Å–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–∏ –æ—Ç–∑—ã–≤–∞, –º–æ–∂–Ω–æ —Å –ø–æ–º—â—å—é —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã",
            # skip
            "Type this command allow you to close question / –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –ø–æ–∑–≤–æ–ª—è–µ—Ç –∑–∞–∫—Ä—ã—Ç—å –≤–æ–ø—Ä–æ—Å"  # cancel
        ]
    return CardFactory.adaptive_card({
        "type": "AdaptiveCard",
        "$schema": "http://adaptivecards.io/schemas/adaptive-card.json",
        "version": "1.2",
        "body": [
            {
                "type": "TextBlock",
                "text": text,
                "separator": True,
                "size": "Medium",
                "weight": "Bolder"
            },
            {
                "type": "TextBlock",
                "text": about_bot,
                "wrap": True,
                "separator": True
            },
            {
                "type": "TextBlock",
                "text": author,
                "wrap": True,
                "separator": True
            },
            {"type": "ColumnSet",
             "columns": [
                 {"type": "Column", "width": width,
                  "items": [{"type": "TextBlock", "text": "List of command"}]},
                 {"type": "Column", "width": "stretch",
                  "items": [{"type": "TextBlock", "text": "Description"}]}
             ], "separator": True},
            {
                "type": "ColumnSet",
                "columns": [
                    {"type": "Column", "width": width,
                     "items": [{"type": "TextBlock", "text": "/start"}],
                     },
                    {"type": "Column", "width": "stretch",
                     "items": [{"type": "TextBlock", "text": description_for_command[0],
                                "wrap": True, "separator": True}]
                     }
                ], "separator": True
            },
            {
                "type": "ColumnSet",
                "columns": [
                    {
                        "type": "Column", "width": width,
                        "items": [{"type": "TextBlock", "text": "/setting "}]
                    },
                    {
                        "type": "Column", "width": "stretch",
                        "items": [{"type": "TextBlock", "text": description_for_command[1],
                                   "wrap": True}]
                    }
                ]
            },
            {
                "type": "ColumnSet",
                "columns": [
                    {
                        "type": "Column", "width": width,
                        "items": [{"type": "TextBlock", "text": " /tickets"
                                   }
                                  ]
                    },
                    {
                        "type": "Column", "width": "stretch",
                        "items": [{"type": "TextBlock", "text": description_for_command[2], "wrap": True
                                   }
                                  ]
                    }
                ]
            },
            {
                "type": "ColumnSet", "columns": [
                {
                    "type": "Column", "width": width,
                    "items": [{"type": "TextBlock", "text": "/skip"
                               }
                              ]
                },
                {
                    "type": "Column", "width": "stretch",
                    "items": [{"type": "TextBlock", "text": description_for_command[3], "wrap": True
                               }
                              ]
                }
            ]
            },
            {
                "type": "ColumnSet", "columns": [
                {
                    "type": "Column", "width": width,
                    "items": [{"type": "TextBlock", "text": "/cancel"}]
                },
                {
                    "type": "Column", "width": "stretch",
                    "items": [{"type": "TextBlock", "text": description_for_command[4], "wrap": True}]
                }]
            },
        ]
    })


# menu of tickets
async def function_TICKETS(language, userProfile) -> Attachment:
    list_of_question = list()
    list_of_question.append({"type": "TextBlock", "text": "Opened tickets"})
    list_of_question.append({
        "type": "ColumnSet",
        "columns": [
            {"type": "Column", "width": "stretch",
             "items": [{"type": "TextBlock", "text": "Question", "weight": "Bolder", "color": "Accent"}]},
            {"type": "Column", "width": "80px",
             "items": [{"type": "TextBlock", "text": "ticket number/date of creation", "color": "Accent",
                        "weight": "Bolder", "wrap": True, "separator": True}]}
        ], "separator": True
    })
    for question in userProfile.opened_ticket:
        list_of_question.append({
            "type": "ColumnSet",
            "columns": [
                {"type": "Column", "width": "stretch",
                 "items": [{"type": "Container",
                            "items": [
                                {"type": "TextBlock", "text": question.question, "wrap": True, "weight": "Bolder"},
                                {"type": "TextBlock", "text": question.detail, "wrap": True}]
                            }]
                 },
                {"type": "Column", "width": "80px",
                 "items": [{"type": "TextBlock", "text": question.number},
                           {"type": "TextBlock", "text": question.date_of_creation}
                           ]}
            ], "separator": True
        })
    return CardFactory.adaptive_card({
        "type": "AdaptiveCard",
        "$schema": "http://adaptivecards.io/schemas/adaptive-card.json",
        "version": "1.2",
        "body": list_of_question
    })
